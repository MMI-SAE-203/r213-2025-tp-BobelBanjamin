---
import Card from '../../components/Card.astro';
import Base from '../../layouts/Base.astro';
import { allMaisons } from '../../../backend.mjs';
import { filterByPrix } from '../../../backend.mjs';
//const offres = await allMaisons();

let message = '';
let offres = [];
if (Astro.request.method === "POST") {
    const data = await Astro.request.formData();
    const minPrix = parseInt(data.get("minPrix") as string);
    const maxPrix = parseInt(data.get("maxPrix") as string);

    if (minPrix > 0 && maxPrix > 0 && maxPrix > minPrix) {
        offres = await filterByPrix(minPrix, maxPrix);
		if(offres.length === 0) {
			message = `Pas d'offres entre ${minPrix}€ et ${maxPrix}€`;
		} else {
        	message = `Liste des offres entre ${minPrix}€ et ${maxPrix}€`
		}
    } else {
        message = "Veuillez entrer des valeurs valides pour le prix.";
        offres = await allMaisons();
    }
} else {
    offres = await allMaisons();
}
---

<Base titre="Offres">
    <h1 class="text-4xl font-bold text-center text-green-600 p-6 mb-6 border-b-4 border-green-600">Liste des Offres</h1>

    {message && <p class="text-center text-red-500 mb-4">{message}</p>}

    <div x-data="{ showFavorites: false, viewMode: 'grid' }" class="p-6 bg-green-50 rounded-lg shadow-md">
        <div class="flex justify-center space-x-6 mb-6">
            

            <form action="/offres" method="POST" class="flex space-x-4">
                <input type="number" name="minPrix" placeholder="Prix minimum" class="px-4 py-2 border-2 border-green-600 rounded-lg focus:outline-none focus:border-green-700" />
                <input type="number" name="maxPrix" placeholder="Prix maximum" class="px-4 py-2 border-2 border-green-600 rounded-lg focus:outline-none focus:border-green-700" />
                <input type="submit" value="Filtrer par prix" class="bg-green-600 text-white px-6 py-2 rounded-lg shadow-md hover:bg-green-700 transition duration-300" />
            </form>
            
        </div>

        <div x-show="!showFavorites" :class="viewMode === 'grid' ? 'flex flex-wrap justify-center mt-6' : 'space-y-6'">
            {offres.map((offre) => (
                <Card {...offre} nomMaison={offre.nomMaison} imgUrl={offre.imgUrl} :class="viewMode === 'grid' ? 'w-1/4 p-4' : 'w-full'"/>
            ))}
        </div>

        <div x-show="showFavorites" :class="viewMode === 'grid' ? 'flex flex-wrap justify-center mt-6' : 'space-y-6'">
            {offres.map((offre) => offre.favori && (
                <Card {...offre} nomMaison={offre.nomMaison} imgUrl={offre.imgUrl} :class="viewMode === 'grid' ? 'w-1/4 p-4' : 'w-full'"/>
            ))}
        </div>
    </div>
</Base> 
 